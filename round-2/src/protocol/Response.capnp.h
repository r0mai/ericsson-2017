// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: Response.capnp

#ifndef CAPNP_INCLUDED_c006e8d67841eca5_
#define CAPNP_INCLUDED_c006e8d67841eca5_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 6001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "Common.capnp.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(9ec349be4999c4ca);
CAPNP_DECLARE_SCHEMA(daaf1fa3caa461e2);
CAPNP_DECLARE_SCHEMA(a9b9ddaa203d4eec);
CAPNP_DECLARE_SCHEMA(e0465929898903c5);
CAPNP_DECLARE_SCHEMA(e3f0a29933f791f6);
CAPNP_DECLARE_SCHEMA(b40482839d54ca4a);
CAPNP_DECLARE_SCHEMA(a38a222490d11b10);

}  // namespace schemas
}  // namespace capnp

namespace protocol {

struct Cell {
  Cell() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Attack;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9ec349be4999c4ca, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Cell::Attack {
  Attack() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    CAN,
    UNIT,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(daaf1fa3caa461e2, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Enemy {
  Enemy() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Direction;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a9b9ddaa203d4eec, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Enemy::Direction {
  Direction() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e0465929898903c5, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Unit {
  Unit() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e3f0a29933f791f6, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Response {
  Response() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Info;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b40482839d54ca4a, 2, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Response::Info {
  Info() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a38a222490d11b10, 2, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Cell::Reader {
public:
  typedef Cell Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getOwner() const;

  inline typename Attack::Reader getAttack() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Cell::Builder {
public:
  typedef Cell Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getOwner();
  inline void setOwner( ::int32_t value);

  inline typename Attack::Builder getAttack();
  inline typename Attack::Builder initAttack();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Cell::Pipeline {
public:
  typedef Cell Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename Attack::Pipeline getAttack();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Cell::Attack::Reader {
public:
  typedef Attack Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isCan() const;
  inline bool getCan() const;

  inline bool isUnit() const;
  inline  ::int32_t getUnit() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Cell::Attack::Builder {
public:
  typedef Attack Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isCan();
  inline bool getCan();
  inline void setCan(bool value);

  inline bool isUnit();
  inline  ::int32_t getUnit();
  inline void setUnit( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Cell::Attack::Pipeline {
public:
  typedef Attack Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Enemy::Reader {
public:
  typedef Enemy Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasPosition() const;
  inline  ::protocol::Position::Reader getPosition() const;

  inline typename Direction::Reader getDirection() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Enemy::Builder {
public:
  typedef Enemy Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPosition();
  inline  ::protocol::Position::Builder getPosition();
  inline void setPosition( ::protocol::Position::Reader value);
  inline  ::protocol::Position::Builder initPosition();
  inline void adoptPosition(::capnp::Orphan< ::protocol::Position>&& value);
  inline ::capnp::Orphan< ::protocol::Position> disownPosition();

  inline typename Direction::Builder getDirection();
  inline typename Direction::Builder initDirection();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Enemy::Pipeline {
public:
  typedef Enemy Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::protocol::Position::Pipeline getPosition();
  inline typename Direction::Pipeline getDirection();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Enemy::Direction::Reader {
public:
  typedef Direction Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::protocol::Direction getVertical() const;

  inline  ::protocol::Direction getHorizontal() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Enemy::Direction::Builder {
public:
  typedef Direction Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::protocol::Direction getVertical();
  inline void setVertical( ::protocol::Direction value);

  inline  ::protocol::Direction getHorizontal();
  inline void setHorizontal( ::protocol::Direction value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Enemy::Direction::Pipeline {
public:
  typedef Direction Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Unit::Reader {
public:
  typedef Unit Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getOwner() const;

  inline bool hasPosition() const;
  inline  ::protocol::Position::Reader getPosition() const;

  inline  ::protocol::Direction getDirection() const;

  inline  ::int32_t getHealth() const;

  inline  ::int32_t getKiller() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Unit::Builder {
public:
  typedef Unit Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getOwner();
  inline void setOwner( ::int32_t value);

  inline bool hasPosition();
  inline  ::protocol::Position::Builder getPosition();
  inline void setPosition( ::protocol::Position::Reader value);
  inline  ::protocol::Position::Builder initPosition();
  inline void adoptPosition(::capnp::Orphan< ::protocol::Position>&& value);
  inline ::capnp::Orphan< ::protocol::Position> disownPosition();

  inline  ::protocol::Direction getDirection();
  inline void setDirection( ::protocol::Direction value);

  inline  ::int32_t getHealth();
  inline void setHealth( ::int32_t value);

  inline  ::int32_t getKiller();
  inline void setKiller( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Unit::Pipeline {
public:
  typedef Unit Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::protocol::Position::Pipeline getPosition();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Response::Reader {
public:
  typedef Response Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasStatus() const;
  inline  ::capnp::Text::Reader getStatus() const;

  inline typename Info::Reader getInfo() const;

  inline bool hasCells() const;
  inline  ::capnp::List< ::capnp::List< ::protocol::Cell>>::Reader getCells() const;

  inline bool hasEnemies() const;
  inline  ::capnp::List< ::protocol::Enemy>::Reader getEnemies() const;

  inline bool hasUnits() const;
  inline  ::capnp::List< ::protocol::Unit>::Reader getUnits() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Response::Builder {
public:
  typedef Response Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasStatus();
  inline  ::capnp::Text::Builder getStatus();
  inline void setStatus( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initStatus(unsigned int size);
  inline void adoptStatus(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownStatus();

  inline typename Info::Builder getInfo();
  inline typename Info::Builder initInfo();

  inline bool hasCells();
  inline  ::capnp::List< ::capnp::List< ::protocol::Cell>>::Builder getCells();
  inline void setCells( ::capnp::List< ::capnp::List< ::protocol::Cell>>::Reader value);
  inline void setCells(::kj::ArrayPtr<const  ::capnp::List< ::protocol::Cell>::Reader> value);
  inline  ::capnp::List< ::capnp::List< ::protocol::Cell>>::Builder initCells(unsigned int size);
  inline void adoptCells(::capnp::Orphan< ::capnp::List< ::capnp::List< ::protocol::Cell>>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::List< ::protocol::Cell>>> disownCells();

  inline bool hasEnemies();
  inline  ::capnp::List< ::protocol::Enemy>::Builder getEnemies();
  inline void setEnemies( ::capnp::List< ::protocol::Enemy>::Reader value);
  inline  ::capnp::List< ::protocol::Enemy>::Builder initEnemies(unsigned int size);
  inline void adoptEnemies(::capnp::Orphan< ::capnp::List< ::protocol::Enemy>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::protocol::Enemy>> disownEnemies();

  inline bool hasUnits();
  inline  ::capnp::List< ::protocol::Unit>::Builder getUnits();
  inline void setUnits( ::capnp::List< ::protocol::Unit>::Reader value);
  inline  ::capnp::List< ::protocol::Unit>::Builder initUnits(unsigned int size);
  inline void adoptUnits(::capnp::Orphan< ::capnp::List< ::protocol::Unit>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::protocol::Unit>> disownUnits();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Response::Pipeline {
public:
  typedef Response Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename Info::Pipeline getInfo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Response::Info::Reader {
public:
  typedef Info Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getOwns() const;

  inline  ::int32_t getLevel() const;

  inline  ::int32_t getTick() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Response::Info::Builder {
public:
  typedef Info Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getOwns();
  inline void setOwns( ::int32_t value);

  inline  ::int32_t getLevel();
  inline void setLevel( ::int32_t value);

  inline  ::int32_t getTick();
  inline void setTick( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Response::Info::Pipeline {
public:
  typedef Info Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::int32_t Cell::Reader::getOwner() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Cell::Builder::getOwner() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Cell::Builder::setOwner( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline typename Cell::Attack::Reader Cell::Reader::getAttack() const {
  return typename Cell::Attack::Reader(_reader);
}
inline typename Cell::Attack::Builder Cell::Builder::getAttack() {
  return typename Cell::Attack::Builder(_builder);
}
#if !CAPNP_LITE
inline typename Cell::Attack::Pipeline Cell::Pipeline::getAttack() {
  return typename Cell::Attack::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename Cell::Attack::Builder Cell::Builder::initAttack() {
  _builder.setDataField<bool>(::capnp::bounded<32>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint16_t>(::capnp::bounded<3>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint32_t>(::capnp::bounded<2>() * ::capnp::ELEMENTS, 0);
  return typename Cell::Attack::Builder(_builder);
}
inline  ::protocol::Cell::Attack::Which Cell::Attack::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline  ::protocol::Cell::Attack::Which Cell::Attack::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool Cell::Attack::Reader::isCan() const {
  return which() == Cell::Attack::CAN;
}
inline bool Cell::Attack::Builder::isCan() {
  return which() == Cell::Attack::CAN;
}
inline bool Cell::Attack::Reader::getCan() const {
  KJ_IREQUIRE((which() == Cell::Attack::CAN),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, true);
}

inline bool Cell::Attack::Builder::getCan() {
  KJ_IREQUIRE((which() == Cell::Attack::CAN),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, true);
}
inline void Cell::Attack::Builder::setCan(bool value) {
  _builder.setDataField<Cell::Attack::Which>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, Cell::Attack::CAN);
  _builder.setDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, value, true);
}

inline bool Cell::Attack::Reader::isUnit() const {
  return which() == Cell::Attack::UNIT;
}
inline bool Cell::Attack::Builder::isUnit() {
  return which() == Cell::Attack::UNIT;
}
inline  ::int32_t Cell::Attack::Reader::getUnit() const {
  KJ_IREQUIRE((which() == Cell::Attack::UNIT),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Cell::Attack::Builder::getUnit() {
  KJ_IREQUIRE((which() == Cell::Attack::UNIT),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Cell::Attack::Builder::setUnit( ::int32_t value) {
  _builder.setDataField<Cell::Attack::Which>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, Cell::Attack::UNIT);
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Enemy::Reader::hasPosition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Enemy::Builder::hasPosition() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::protocol::Position::Reader Enemy::Reader::getPosition() const {
  return ::capnp::_::PointerHelpers< ::protocol::Position>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::protocol::Position::Builder Enemy::Builder::getPosition() {
  return ::capnp::_::PointerHelpers< ::protocol::Position>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::protocol::Position::Pipeline Enemy::Pipeline::getPosition() {
  return  ::protocol::Position::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Enemy::Builder::setPosition( ::protocol::Position::Reader value) {
  ::capnp::_::PointerHelpers< ::protocol::Position>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::protocol::Position::Builder Enemy::Builder::initPosition() {
  return ::capnp::_::PointerHelpers< ::protocol::Position>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Enemy::Builder::adoptPosition(
    ::capnp::Orphan< ::protocol::Position>&& value) {
  ::capnp::_::PointerHelpers< ::protocol::Position>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::protocol::Position> Enemy::Builder::disownPosition() {
  return ::capnp::_::PointerHelpers< ::protocol::Position>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline typename Enemy::Direction::Reader Enemy::Reader::getDirection() const {
  return typename Enemy::Direction::Reader(_reader);
}
inline typename Enemy::Direction::Builder Enemy::Builder::getDirection() {
  return typename Enemy::Direction::Builder(_builder);
}
#if !CAPNP_LITE
inline typename Enemy::Direction::Pipeline Enemy::Pipeline::getDirection() {
  return typename Enemy::Direction::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename Enemy::Direction::Builder Enemy::Builder::initDirection() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<0>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint16_t>(::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  return typename Enemy::Direction::Builder(_builder);
}
inline  ::protocol::Direction Enemy::Direction::Reader::getVertical() const {
  return _reader.getDataField< ::protocol::Direction>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::protocol::Direction Enemy::Direction::Builder::getVertical() {
  return _builder.getDataField< ::protocol::Direction>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Enemy::Direction::Builder::setVertical( ::protocol::Direction value) {
  _builder.setDataField< ::protocol::Direction>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::protocol::Direction Enemy::Direction::Reader::getHorizontal() const {
  return _reader.getDataField< ::protocol::Direction>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::protocol::Direction Enemy::Direction::Builder::getHorizontal() {
  return _builder.getDataField< ::protocol::Direction>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Enemy::Direction::Builder::setHorizontal( ::protocol::Direction value) {
  _builder.setDataField< ::protocol::Direction>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Unit::Reader::getOwner() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Unit::Builder::getOwner() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Unit::Builder::setOwner( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Unit::Reader::hasPosition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Unit::Builder::hasPosition() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::protocol::Position::Reader Unit::Reader::getPosition() const {
  return ::capnp::_::PointerHelpers< ::protocol::Position>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::protocol::Position::Builder Unit::Builder::getPosition() {
  return ::capnp::_::PointerHelpers< ::protocol::Position>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::protocol::Position::Pipeline Unit::Pipeline::getPosition() {
  return  ::protocol::Position::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Unit::Builder::setPosition( ::protocol::Position::Reader value) {
  ::capnp::_::PointerHelpers< ::protocol::Position>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::protocol::Position::Builder Unit::Builder::initPosition() {
  return ::capnp::_::PointerHelpers< ::protocol::Position>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Unit::Builder::adoptPosition(
    ::capnp::Orphan< ::protocol::Position>&& value) {
  ::capnp::_::PointerHelpers< ::protocol::Position>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::protocol::Position> Unit::Builder::disownPosition() {
  return ::capnp::_::PointerHelpers< ::protocol::Position>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::protocol::Direction Unit::Reader::getDirection() const {
  return _reader.getDataField< ::protocol::Direction>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::protocol::Direction Unit::Builder::getDirection() {
  return _builder.getDataField< ::protocol::Direction>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Unit::Builder::setDirection( ::protocol::Direction value) {
  _builder.setDataField< ::protocol::Direction>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Unit::Reader::getHealth() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, 3);
}

inline  ::int32_t Unit::Builder::getHealth() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, 3);
}
inline void Unit::Builder::setHealth( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value, 3);
}

inline  ::int32_t Unit::Reader::getKiller() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, 6);
}

inline  ::int32_t Unit::Builder::getKiller() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, 6);
}
inline void Unit::Builder::setKiller( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value, 6);
}

inline bool Response::Reader::hasStatus() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Response::Builder::hasStatus() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Response::Reader::getStatus() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Response::Builder::getStatus() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Response::Builder::setStatus( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Response::Builder::initStatus(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Response::Builder::adoptStatus(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Response::Builder::disownStatus() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline typename Response::Info::Reader Response::Reader::getInfo() const {
  return typename Response::Info::Reader(_reader);
}
inline typename Response::Info::Builder Response::Builder::getInfo() {
  return typename Response::Info::Builder(_builder);
}
#if !CAPNP_LITE
inline typename Response::Info::Pipeline Response::Pipeline::getInfo() {
  return typename Response::Info::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename Response::Info::Builder Response::Builder::initInfo() {
  _builder.setDataField< ::uint32_t>(::capnp::bounded<0>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint32_t>(::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint32_t>(::capnp::bounded<2>() * ::capnp::ELEMENTS, 0);
  return typename Response::Info::Builder(_builder);
}
inline bool Response::Reader::hasCells() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Response::Builder::hasCells() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::List< ::protocol::Cell>>::Reader Response::Reader::getCells() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::protocol::Cell>>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::List< ::protocol::Cell>>::Builder Response::Builder::getCells() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::protocol::Cell>>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Response::Builder::setCells( ::capnp::List< ::capnp::List< ::protocol::Cell>>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::protocol::Cell>>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Response::Builder::setCells(::kj::ArrayPtr<const  ::capnp::List< ::protocol::Cell>::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::protocol::Cell>>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::List< ::protocol::Cell>>::Builder Response::Builder::initCells(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::protocol::Cell>>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Response::Builder::adoptCells(
    ::capnp::Orphan< ::capnp::List< ::capnp::List< ::protocol::Cell>>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::protocol::Cell>>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::List< ::protocol::Cell>>> Response::Builder::disownCells() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::protocol::Cell>>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Response::Reader::hasEnemies() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Response::Builder::hasEnemies() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::protocol::Enemy>::Reader Response::Reader::getEnemies() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::protocol::Enemy>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::protocol::Enemy>::Builder Response::Builder::getEnemies() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::protocol::Enemy>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Response::Builder::setEnemies( ::capnp::List< ::protocol::Enemy>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::protocol::Enemy>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::protocol::Enemy>::Builder Response::Builder::initEnemies(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::protocol::Enemy>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Response::Builder::adoptEnemies(
    ::capnp::Orphan< ::capnp::List< ::protocol::Enemy>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::protocol::Enemy>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::protocol::Enemy>> Response::Builder::disownEnemies() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::protocol::Enemy>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Response::Reader::hasUnits() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Response::Builder::hasUnits() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::protocol::Unit>::Reader Response::Reader::getUnits() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::protocol::Unit>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::protocol::Unit>::Builder Response::Builder::getUnits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::protocol::Unit>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Response::Builder::setUnits( ::capnp::List< ::protocol::Unit>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::protocol::Unit>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::protocol::Unit>::Builder Response::Builder::initUnits(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::protocol::Unit>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Response::Builder::adoptUnits(
    ::capnp::Orphan< ::capnp::List< ::protocol::Unit>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::protocol::Unit>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::protocol::Unit>> Response::Builder::disownUnits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::protocol::Unit>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::int32_t Response::Info::Reader::getOwns() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Response::Info::Builder::getOwns() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Response::Info::Builder::setOwns( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Response::Info::Reader::getLevel() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Response::Info::Builder::getLevel() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Response::Info::Builder::setLevel( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Response::Info::Reader::getTick() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Response::Info::Builder::getTick() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Response::Info::Builder::setTick( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

}  // namespace

#endif  // CAPNP_INCLUDED_c006e8d67841eca5_
